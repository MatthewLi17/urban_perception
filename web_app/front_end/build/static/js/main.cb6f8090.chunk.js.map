{"version":3,"sources":["Contact.js","Home.js","Images.js","App.js","reportWebVitals.js","index.js"],"names":["Contact","className","Home","props","videoId","opts","height","width","playerVars","autoplay","onReady","event","target","playVideo","Button","onClick","setView","Images","host","process","useState","api","cache","setCache","uuidv4","userId","submit","img_1","img_2","perception","choice","user_id","requestOptions","method","header","mode","body","JSON","stringify","String","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","Date","now","fetch","then","response","json","img_html","panoid","head","heady","Math","round","updates","fetchImage","console","log","meta","Row","class","idx","src","alt","variant","size","block","require","config","path","App","view","setMeta","result","map","item","angle","cluster","pp","pp_float","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb6f8090.chunk.js","sourcesContent":["\nfunction Contact() {\n\n  return (\n    <div className=\"App\">\n      <p> Contact Info</p>\n    </div>\n  );\n}\nexport default Contact;\n","import YouTube from 'react-youtube';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\n\nfunction Home(props) {\n  const opts = {\n    height: '390',\n    width: '640',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  const _onReady = (event) => {\n    // access to player in all event handlers via event.target\n    event.target.playVideo();\n  }\n\n  return (\n          <div>\n          <p>home</p>\n          <YouTube videoId=\"2g811Eo7K8U\" opts={opts} onReady={_onReady} />\n          <Button onClick={() => props.setView(1)}>start</Button>\n          </div>\n  );\n}\n\nexport default Home;","import { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport Contact from \"./Contact\"\nimport Home from \"./Home\"\n\nfunction Images(props) {\n  const host = process.env.REACT_APP_BACK_END_HOST;\n  const port = process.env.REACT_APP_BACK_END_PORT;\n  const [api, setApi] = useState(process.env.REACT_APP_API_KEY);\n\n  const [cache, setCache] = useState(0);\n  const [userId, setUserId] = useState(uuidv4());\n\n  const date = () => {\n    return String(Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(Date.now()))\n  }\n\n  const submit = (img_1, img_2, perception, choice, user_id) => {\n    const requestOptions = {\n      method: 'POST',\n      header: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'http://' + host + ':5000/post_data', 'Accept': 'application/json' },\n      mode: 'cors',\n      body: JSON.stringify(\n        {\n          \"img_1\": img_1,\n          \"img_2\": img_2,\n          \"perception\": perception,\n          \"choice\": choice,\n          \"user_id\": user_id,\n          \"time\": date()\n        }\n      )\n    };\n    fetch('http://' + host + ':5000/post_data', requestOptions)\n      .then(response => response.json())\n  };\n\n  // render image using API\n  const img_html = (panoid, head) => {\n    var heady = Math.round(head);\n    return `https://maps.googleapis.com/maps/api/streetview?size=640x640&pano=${panoid}&fov=120&heading=${heady}&pitch=0&key=${api}`\n  };\n\n  const updates = () => {\n    // count the image pairs to refresh data bindings\n    setCache(cache + 2);\n    if ((cache + 2) % 10 === 0) {\n        props.fetchImage();\n        setCache(0);\n    }\n};\n\n  return (\n    <div className=\"App\">\n      <p>Images</p>\n      {console.log(props.meta)}\n      <Row className='page'>\n                <div class=\"col-lg-4 offset-lg-1 col-md-4 offset-md-1 p-1\">\n                    <img className='images' onClick={() => { submit(props.meta.meta[cache].idx, props.meta.meta[cache + 1].idx, 'choice', props.meta.meta[cache].idx, userId); updates() }} src={img_html(props.meta.meta[cache].panoid, props.meta.meta[cache].head)} alt='image not loaded' />\n                </div>\n                <div class=\"col-lg-2 offset-lg-0 col-md-2 offset-md-0\">\n                    <Button variant=\"outline-secondary\" className='button' size='lg' block onClick={() => { submit(props.meta.meta[cache][2], props.meta.meta[cache + 1][2], 'choice', '1', userId); updates() }}>â‰ˆ Roughly Equal</Button>\n                    <Button variant=\"outline-secondary\" className='button' size='lg' block onClick={() => { submit(props.meta.meta[cache][2], props.meta.meta[cache + 1][2], 'choice', '0', userId); updates() }}>x Not Comparable</Button>\n                    <Button variant=\"outline-secondary\" className='button' size='lg' block onClick={() => { submit(props.meta.meta[cache][2], props.meta.meta[cache + 1][2], 'choice', '2', userId); updates() }}>Image not shown</Button>\n                </div>\n                \n                <div class=\"col-lg-4 offset-lg-0 col-md-4 p-1\">\n                    <img className='images' onClick={() => { submit(props.meta.meta[cache].idx, props.meta.meta[cache + 1].idx, 'choice', props.meta.meta[cache + 1].idx, userId); updates() }} src={img_html(props.meta.meta[cache + 1].panoid, props.meta.meta[cache + 1].head)} alt='image not loaded' />\n                </div>\n            </Row>\n    </div>\n  );\n}\nexport default Images;\n","import {useState} from \"react\";\nimport Contact from \"./Contact\"\nimport Images from \"./Images\"\nimport Home from \"./Home\"\nimport \"./App.css\";\nrequire('dotenv').config({path: '../.env'});\n\nfunction App() {\n\n  const [view, setView] = useState(2);\n  const [meta, setMeta] = useState({ meta: 'aaa' });\n\n  const host = process.env.REACT_APP_BACK_END_HOST;\n  const port = process.env.REACT_APP_BACK_END_PORT;\n\n\n  const fetchImage = () => {\n    const requestOptions = {\n      method: 'GET',\n      header: { 'Content-Type': 'application/json'}\n    };\n    fetch('http://' + host + ':' + port + '/get_data', requestOptions)\n      .then(response => response.json())\n      .then(result => {\n        setMeta({\n          meta: result.map(item => ({\n            panoid: item[0],\n            month: item[1],\n            idx: item[2],\n            angle: item[3],\n            head: item[4],\n            cluster: item[5],\n            pp: item[6],\n            pp_float: item[8]\n          }))\n        });\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <p>perceptions</p>\n      <button onClick={() => setView(0)}>contactInfo</button>\n      <button onClick={() => { setView(1); fetchImage() }}>images</button>\n      <button onClick={() => setView(2)}>home</button>\n      { view === 0 ? <Contact/> : null}\n      { view === 1 ? <Images setView={setView} fetchImage={fetchImage} meta={meta} /> : null}\n      { view === 2 ? <Home setView={setView}/> : null}\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}